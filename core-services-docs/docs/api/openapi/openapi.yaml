openapi: 3.0.3
info:
  title: Core Service API Gateway
  version: 1.0.0
  description: |
    REST API Gateway for Core Service providing User and Auth management endpoints.
servers:
  - url: https://api.example.com/v1
    description: Production server

paths:
  /users:
    get:
      summary: List users
      description: Retrieve a list of users optionally filtered by tenant and role.
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
          required: true
          description: Tenant ID to filter users.
        - in: query
          name: role_id
          schema:
            type: string
          required: false
          description: Role ID to filter users.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Invalid request parameters
        '401':
          description: Unauthorized

    post:
      summary: Create user
      description: Create a new user for a tenant.
      requestBody:
        description: User object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '409':
          description: User with email already exists
        '401':
          description: Unauthorized

  /users/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized

    put:
      summary: Update user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        description: User update payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized

    delete:
      summary: Delete user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate using email/password or OAuth token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "user123"
        tenant_id:
          type: string
          example: "tenant123"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        role_id:
          type: string
          example: "role_admin"

    CreateUserRequest:
      type: object
      required:
        - tenant_id
        - email
        - name
        - role_id
      properties:
        tenant_id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role_id:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        role_id:
          type: string

    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        oauth_token:
          type: string
          description: Optional OAuth token for external providers

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          description: Token validity in seconds

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

security:
  - bearerAuth: []

